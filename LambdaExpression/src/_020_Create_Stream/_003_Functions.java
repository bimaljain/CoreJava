/*
We can have a function that can generate values on demand.

The following two static methods from Stream interface generates an infinite stream from a function.

<T> Stream<T> iterate(T  seed, UnaryOperator<T>  f)
<T> Stream<T> generate(Supplier<T> s)

Stream.iterate()
iterate() method creates a sequential ordered stream.
The iterate() method takes two arguments: a seed and a function.
A seed is the first element of the stream. The second element is generated by applying the function to the first element. The third element is generated 
by applying the function on the second element.
Therefore the elements are: seed, f(seed), f(f(seed)), f(f(f(seed)))....

Stream.generate()
generate() method creates a sequential unordered stream.
generate(Supplier<T> s) uses Supplier to generate an infinite sequential unordered stream.

IntStream, LongStream, and DoubleStream contain iterate() and generate() methods that take parameters specific to their primitive types and generate values.
For example, the following two methods are defined in the IntStream interface:

IntStream iterate(int seed,  IntUnaryOperator f)
IntStream generate(IntSupplier s)

 */

package _020_Create_Stream;

import java.util.stream.DoubleStream;
import java.util.stream.Stream;

public class _003_Functions {

	public static void main(String[] args) {
		//Stream of natural numbers
		Stream<Integer> s1 = Stream.iterate(99, n->n+1)
				.limit(10);
		s1.forEach(System.out::println);

		Stream.iterate(1, n->n+1)
		.filter(n->n%2==0) //get only even numbers
		.skip(100) //skip first 100 elements
		.limit(5)
		.forEach(System.out::println);

		Stream<Double> s4= Stream.generate(Math::random); //Stream will always generate Double object
		//DoubleStream s5 = DoubleStream.generate(Math::random); Use generate() from DoubleStream to generate primitives
		s4.limit(5)
		.forEach(System.out::println);

		//To generate a stream in which the next element is generated based on the previous one, you will need to use a Supplier that stores the 
		//last generated element. 
		Stream.generate(_003_Functions::fn1)
		.limit(5)
		.forEach(System.out::println);

		Stream.generate(_003_Functions::fn2)
		.limit(5)
		.forEach(System.out::println);
	}	

	public static int fn1(){		
		int j=999; // this does not work since updated j is no longer available after fn1() completes
		j=j+1;
		return j;
	}

	static int i=99; 
	public static int fn2(){		
		i=i+1;
		return i;
	}

}
